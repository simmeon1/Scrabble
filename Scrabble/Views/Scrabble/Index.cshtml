@model Scrabble.Models.Game
@{
    ViewData["Title"] = "Scrabble";
}

<head>
    <link rel="stylesheet" href="~/css/index.css">
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/js/functions.js"></script>
</head>

<style>
    .grid-item {
        width: @(Model.Board.IntToCSSWidth(Model.Board.Columns))%;
</style>

<div id="game">
    <div id="player">
        <div id="rack">@(Model.Player.Rack.ToString())</div>
        <div>
            <p id="startingWordPosition">None</p>
            <input id="wordInput" type="text">
        </div>
        <div id="inputErrors"></div>
    </div>
    <div id="board">
        @{BoardTile[,] boardAs2DArray = Model.Board.ConvertTo2DArray(); }
        @for (int i = 0; i < boardAs2DArray.GetLength(0); i++)
        {
            <div id="row-@(i+1)">
                @for (int j = 0; j < boardAs2DArray.GetLength(1); j++)
                {

                    @if (boardAs2DArray[i,j] != null && boardAs2DArray[i,j].LetterTile != null)
                    {
                        <div id="tile-@(((i)*Model.Board.Columns)+j+1)" class="grid-item locked">@boardAs2DArray[i,j].LetterTile.Letter</div>
                    }
                    else
                    {
                        <div id="tile-@(((i)*Model.Board.Columns)+j+1)" class="grid-item">&nbsp; &nbsp;</div>
                    }
                }
            </div>
        }
    </div>
</div>
@*<h2>@Html.DisplayFor(model => model.Pouch.PouchTiles)</h2>
    <h2>
        @foreach (Player p in Model.PlayerData)
        {
            <h1>@p.Rack.ToString()</h1>
        }
    </h2>*@
