@model Scrabble.Models.Game
@{
    ViewData["Title"] = "Scrabble";
}
<html>
<head>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <link href="//netdna.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
    <script src="//code.jquery.com/jquery-3.3.1.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    <script src="~/js/functions.js"></script>
    <link rel="stylesheet" href="~/css/index.css">
</head>

<style>
    .grid-item {
        width: @(Model.Board.IntToCSSWidth(Model.Board.Columns))%;
    }
</style>
<body>
    <div id="game">
        <div id="userCommands">
            <div id="player">
                <div id="rack">
                    @foreach (Player p in Model.Players)
                    {
                        @if (p.AtHand)
                        {
                            int rackIndex = 1;
                            <p>
                                @foreach (Rack_CharTile c in p.Rack.Rack_CharTiles)
                                {

                                    @for (int i = 0; i < c.Count; i++)
                                    {
                                        <button id="rack_chartile_@(rackIndex)_@(c.CharTileID)" class="btn btn-default btn-lg rack_chartile">
                                            <span class="rack_chartile_letter">@(c.CharTile.Letter)</span>
                                            <span class="rack_chartile_score small">@(c.CharTile.Score)</span>
                                        </button>
                                        rackIndex++;
                                    }
                                }
                            </p>
                            break;
                        }
                    }
                </div>
                @*<div>
                <p id="startingWordPosition">None</p>
                <input id="wordInput" type="text">
            </div>
            <div id="inputErrors"></div>*@
            </div>
            <div id="controls">
                <p>
                    @*<button id="goLeft" class="btn btn-default btn-lg changeDirection"><span class="glyphicon glyphicon-arrow-right"></span></button>*@
                    <button id="showAnchors" class="btn btn-default btn-lg"><span>Anchors</span></button>
                    <button id="submit" class="btn btn-default btn-lg"><span>Submit</span></button>
                </p>

            </div>
            <div>
                <p>
                    <span id="statusMessage">Message will show here.</span>
                </p>
            </div>
        </div>

        <div id="board">
            @{BoardTile[,] boardAs2DArray = Model.Board.ConvertTo2DArray(); }
            @for (int i = 0; i < boardAs2DArray.GetLength(0); i++)
            {
                <div id="row-@(i+1)">
                    @for (int j = 0; j < boardAs2DArray.GetLength(1); j++)
                    {

                        @if (boardAs2DArray[i, j] != null && boardAs2DArray[i, j].CharTile != null)
                        {
                            <div id="tile_@(boardAs2DArray[i,j].BoardLocationX)_@(boardAs2DArray[i,j].BoardLocationY)" class="grid-item locked">
                                <span>@boardAs2DArray[i, j].CharTile.Letter</span>
                                <span class="board_chartile_score">@boardAs2DArray[i, j].CharTile.Score</span>
                            </div>
                        }
                        else
                        {
                            <div id="tile_@(boardAs2DArray[i,j].BoardLocationX)_@(boardAs2DArray[i,j].BoardLocationY)" class="grid-item @(boardAs2DArray[i,j].BoardTileType.Type)">&nbsp; &nbsp;</div>
                        }
                    }
                </div>
            }
        </div>
    </div>
</body>
</html>
@*<h2>@Html.DisplayFor(model => model.Pouch.PouchTiles)</h2>
    <h2>
        @foreach (Player p in Model.PlayerData)
        {
            <h1>@p.Rack.ToString()</h1>
        }
    </h2>*@
