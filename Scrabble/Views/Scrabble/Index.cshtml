@model Scrabble.Models.Game
@{
    ViewData["Title"] = "Scrabble";
    //@ViewBag.FlipBoard
    List<Player> players = Model.Players.ToList();
    List<Player> playersOnLeftSide = new List<Player>();
    List<Player> playersOnRightSide = new List<Player>();
    for (var i = 0; i < players.Count; i++)
    {
        if (i % 4 == 0 || i % 4 == 1)
        {
            playersOnLeftSide.Add(players[i]);
        }
        else
        {
            playersOnRightSide.Add(players[i]);
        }
    }
}
<!DOCTYPE html>
<html>
<head>
    <link href="//netdna.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
    <script src="//code.jquery.com/jquery-3.3.1.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    <script src="~/js/functions.js"></script>
    <link rel="stylesheet" href="~/css/index.css">
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>

<style>
    .grid-item {
        width: @(Model.Board.IntToCSSWidth(Model.Board.Columns))%;
    }
</style>
<body>
    <div id="game" class="container">
        <div id="userCommands">
            <div id="player">
                <div id="rack" class="col-xs-12">
                    @foreach (Player p in players)
                    {
                        @if (p.AtHand)
                        {
                            int rackIndex = 1;
                            <p>
                                @foreach (Rack_CharTile c in p.Rack.Rack_CharTiles)
                                {

                                    @for (int i = 0; i < c.Count; i++)
                                    {
                                        <button id="rack_chartile_@(rackIndex)_@(c.CharTileID)" class="btn btn-default btn rack_chartile">
                                            <span class="rack_chartile_letter">@(c.CharTile.Letter)</span>
                                            <span class="rack_chartile_score">@(c.CharTile.Score)</span>
                                        </button>
                                        rackIndex++;
                                    }
                                }
                            </p>
                            break;
                        }
                    }
                </div>
            </div>
            <div id="controls">
                <p>
                    <button id="showAnchors" class="btn btn-default btn-sm"><span>Anchors</span></button>
                    <button id="clearPlacements" class="btn btn-default btn-sm"><span>Clear</span></button>
                    <button id="submit" class="btn btn-primary btn-sm"><span>Submit</span></button>
                    <button id="getMoves" class="btn btn-default btn-sm"><span>Get Moves</span></button>
                    <button id="redraw" class="btn btn-default btn-sm"><span>Redraw</span></button>
                    <button id="skip" class="btn btn-default btn-sm"><span>Skip</span></button>
                    <button id="flipBoard" class="btn btn-default btn-sm"><span>Flip</span></button>

                </p>
            </div>
            <div>
                <p class="text-center">
                    <span id="pouchContent">@Model.Pouch.ToString()</span>
                </p>
            </div>
        </div>
        <div id="gameAndOutput">
            <div id="statusMessage" class="col-xs-12">
            </div>
            <div id="leftOutput" class="col-xs-12 col-sm-2 panel-group output">
                @foreach (var player in playersOnLeftSide)
                {
                    <div id="player-@(player.ID)-log" class="playerLog col-xs-6 col-sm-12 panel panel-@(player.AtHand ? "primary" : "default")">
                        <div class="panel-heading">
                            <span>Player @(player.ID)</span>
                        </div>
                        <div class="panel-body">
                            @if (player.Moves.Count == 0)
                            {
                                <span>No moves played.</span>
                            }
                            else
                            {
                                <table class="table table-striped table-condensed">
                                    <thead>
                                        <tr>
                                            <th class="col-xs-11">Word</th>
                                            <th class="col-xs-1">Score</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var move in player.Moves)
                                        {
                                            <tr>
                                                <td>@move.Word</td>
                                                <td>@move.Score</td>
                                            </tr>
                                        }
                                        <tr>
                                            <td><strong>Total</strong></td>
                                            <td><strong>@player.Score</strong></td>
                                        </tr>
                                    </tbody>
                                </table>
                            }
                        </div>
                    </div>
                }
            </div>
            @{var flipBoard = ViewBag.FlipBoard;}
            <div id="board" class="@if (flipBoard == "true") { <text>flipped</text> } col-xs-12 col-sm-@if (players.Count > 2) { <text>8</text> }else {<text>10</text>}">
                @{BoardTile[,] boardAs2DArray = Model.Board.ConvertTo2DArray(); }
                @if (ViewBag != null && ViewBag.FlipBoard == "true")
                {
                    boardAs2DArray = Model.Board.Transpose2DArray(boardAs2DArray);
                }

                @for (int i = 0; i < boardAs2DArray.GetLength(0); i++)
                {
                    <div id="row-@(i+1)" class="board_row">
                        @for (int j = 0; j < boardAs2DArray.GetLength(1); j++)
                        {

                            @if (boardAs2DArray[i, j] != null && boardAs2DArray[i, j].CharTile != null)
                            {
                                <div id="tile_@(boardAs2DArray[i,j].BoardLocationX)_@(boardAs2DArray[i,j].BoardLocationY)" class="grid-item locked @(boardAs2DArray[i,j].BoardTileType.Type)">
                                    <div id="board_chartile_@(boardAs2DArray[i,j].CharTileID)" class="filled">
                                        <span class="board_chartile_letter">@boardAs2DArray[i, j].CharTile.Letter</span>
                                        <span class="board_chartile_score">@boardAs2DArray[i, j].CharTile.Score</span>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div id="tile_@(boardAs2DArray[i,j].BoardLocationX)_@(boardAs2DArray[i,j].BoardLocationY)" class="grid-item @(boardAs2DArray[i,j].BoardTileType.Type)">
                                    <span id="board_chartile_0">
                                        <br />
                                    </span>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
            <div id="rightOutput" class="col-xs-12 col-sm-2 panel-group output">
                @foreach (var player in playersOnRightSide)
                {
                    <div id="player-@(player.ID)-log" class="playerLog col-xs-6 col-sm-12 panel panel-@(player.AtHand ? "primary" : "default")">
                        <div class="panel-heading">
                            <span>Player @(player.ID)</span>
                        </div>
                        <div class="panel-body">
                            @if (player.Moves.Count == 0)
                            {
                                <span>No moves played.</span>
                            }
                            else
                            {
                                <table class="table table-striped table-condensed">
                                    <thead>
                                        <tr>
                                            <th class="col-xs-11">Word</th>
                                            <th class="col-xs-1">Score</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var move in player.Moves)
                                        {
                                            <tr>
                                                <td>@move.Word</td>
                                                <td>@move.Score</td>
                                            </tr>
                                        }
                                        <tr>
                                            <td><strong>Total</strong></td>
                                            <td><strong>@player.Score</strong></td>
                                        </tr>
                                    </tbody>
                                </table>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</body>
</html>