@model Scrabble.Models.Game
@{
    ViewData["Title"] = "Scrabble";
    //@ViewBag.FlipBoard
    List<Player> players = Model.Players.ToList();
    List<Player> playersOnLeftSide = new List<Player>();
    List<Player> playersOnRightSide = new List<Player>();
    for (var i = 0; i < players.Count; i++)
    {
        if (i % 4 == 0 || i % 4 == 1)
        {
            playersOnLeftSide.Add(players[i]);
        }
        else
        {
            playersOnRightSide.Add(players[i]);//cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css
        }
    }
}
<!DOCTYPE html>
<html>
<head>
    <link href="//netdna.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
    <link href="//cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css" rel="stylesheet">
    <script src="//code.jquery.com/jquery-3.3.1.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    <script src="//cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>
    <script src="~/js/functions.js"></script>
    <link rel="stylesheet" href="~/css/index.css">
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>

<style>
    .grid-item {
        width: @(Model.Board.IntToCSSWidth(Model.Board.Columns))%;
    }
</style>
<body>
    <div class="container-fluid">
        <div id="game" class="col-lg-8 col-lg-offset-2 @(Model.IsFinished ? "isFinished" : "")">
            <div id="userCommands">
                <div id="player">
                    <div id="rack" class="col-xs-12">
                        @foreach (Player p in players)
                        {
                            @if (p.AtHand)
                            {
                                int rackIndex = 1;
                                <p>
                                    @foreach (Rack_CharTile c in p.Rack.Rack_CharTiles)
                                    {

                                        @for (int i = 0; i < c.Count; i++)
                                        {
                                            <button id="rack_chartile_@(rackIndex)_@(c.CharTileID)" class="btn btn-default rack_chartile">
                                                <span class="rack_chartile_letter">@(c.CharTile.Letter)</span>
                                                <span class="rack_chartile_score">@(c.CharTile.Score)</span>
                                            </button>
                                            rackIndex++;
                                        }
                                    }
                                </p>
                                break;
                            }
                        }
                    </div>
                </div>
                <div id="controls">
                    <p>
                        <button id="showAnchors" class="btn btn-default btn-sm"><span>Anchors</span></button>
                        @*<button id="showPremiums" class="btn btn-default btn-sm"><span>Show Premiums</span></button>*@
                        <button id="shuffle" class="btn btn-default btn-sm"><span>Shuffle</span></button>
                        <button id="clearPlacements" class="btn btn-default btn-sm"><span>Clear</span></button>
                        <button id="submit" class="btn btn-primary btn-sm"><span>Submit</span></button>
                        <button id="getMoves" class="btn btn-default btn-sm"><span>Get Moves</span></button>
                        <button id="redraw" class="btn btn-default btn-sm"><span>Redraw</span></button>
                        <button id="skip" class="btn btn-default btn-sm"><span>Skip</span></button>
                        <button id="flipBoard" class="btn btn-default btn-sm"><span>Flip</span></button>
                        <button id="stats" class="btn btn-default btn-sm"><span>Stats</span></button>
                        <button id="endGame" class="btn btn-default btn-sm"><span>End Game</span></button>
                        <button id="resetGame" class="btn btn-default btn-sm"><span>Reset Game</span></button>
                        <button id="validMovesButton" type="button" class="btn btn-info btn-sm" data-toggle="modal" data-target="#movesModal">Valid Moves</button>
                    </p>
                </div>
                <div id="movesResults">
                    <div class="modal" id="movesModal" role="dialog">
                        <div class="modal-dialog col-xs-8 col-xs-offset-2">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                    <h4 class="modal-title">Valid Moves</h4>
                                </div>
                                <div class="modal-body">
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <p class="text-center">
                        <span id="pouchContent">@Model.Pouch.ToString()</span>
                    </p>
                </div>
            </div>
            <div id="gameAndOutput">
                <div id="endResults" class="col-xs-12 panel-group output">
                    <div class="endResultsLog panel panel-success">
                        <div class="panel-heading">
                            <span>@(Model.IsFinished ? "Game has ended!" : "Stats")</span>
                        </div>
                        <div class="panel-body">
                            <table class="table table-striped table-condensed">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Score</th>
                                        <th>Highest Play</th>
                                        <th>Avg. Score per Play</th>
                                        <th>Avg. Words per Play</th>
                                        @*<th>Avg. Tiles Used per Play</th>*@
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int i = 0; i < players.Count; i++)
                                    {
                                        var player = players[i];
                                        var playerMoves = player.Moves;
                                        var lastMoveNumber = playerMoves.Count == 0 ? 0 : playerMoves.OrderByDescending(m => m.MoveNumber).FirstOrDefault().MoveNumber;
                                        var highestScoringPlay = 0;
                                        var averageScore = lastMoveNumber == 0 ? 0 : (double) player.Score / (lastMoveNumber + player.SkipsOrRedrawsUsed);
                                        var averageWordsPerMove = lastMoveNumber == 0 ? 0 : (double)player.Moves.Count / lastMoveNumber;
                                        averageScore = Math.Round(averageScore, 1);
                                        averageWordsPerMove = Math.Round(averageWordsPerMove, 1);
                                        if (lastMoveNumber != 0)
                                        {
                                            for (int j = 1; j <= lastMoveNumber; j++)
                                            {
                                                var currentPlayScore = playerMoves.Where(m => m.MoveNumber == j).Sum(m => m.Score);
                                                if ((currentPlayScore) > highestScoringPlay) { highestScoringPlay = currentPlayScore; }
                                            }
                                        }
                                    <tr>
                                        <td>@(player.Name != null ? player.Name : ("Player " + player.ID))</td>
                                        <td>@player.Score</td>
                                        <td>@highestScoringPlay</td>
                                        <td>@averageScore</td>
                                        <td>@averageWordsPerMove</td>
                                    </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div id="leftOutput" class="col-xs-12 col-sm-2 panel-group output">
                    @foreach (var player in playersOnLeftSide)
                    {
                        <div id="player-@(player.ID)-log" class="playerLog col-xs-6 col-sm-12 panel panel-@(player.AtHand ? "primary" : "default")">
                            <div class="panel-heading">
                                <span>@(player.Name != null ? player.Name : ("Player " + player.ID)) @(player.Rack.ToString())</span>
                            </div>
                            <div class="panel-body">
                                @if (player.Moves.Count == 0)
                                {
                                    <span>No moves played.</span>
                                }
                                else
                                {
                                    <table class="table table-striped table-condensed">
                                        <thead>
                                            <tr>
                                                <th class="col-xs-11">Word</th>
                                                <th class="col-xs-1">Score</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td><strong>Total</strong></td>
                                                <td><strong>@player.Score</strong></td>
                                            </tr>
                                            @{ var moves = player.Moves.ToList();}
                                            @for (int i = 0; i < moves.Count; i++)
                                            {
                                                <tr id="@moves[moves.Count - 1 - i].GetStringForPage()" class="moveRowFromHistory @(moves[moves.Count - 1 - i].MoveNumber % 2 == 0 ? "moveNumberEven" : "moveNumberUneven")">
                                                    <td>@moves[moves.Count - 1 - i].Word</td>
                                                    <td>@moves[moves.Count - 1 - i].Score</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                            </div>
                        </div>
                    }
                </div>

                @{var flipBoard = ViewBag.FlipBoard;}
                <div id="board" class="@if (flipBoard == "true") { <text>flipped</text> } col-xs-12 col-sm-@if (players.Count > 2) { <text>8</text> }else {<text>10</text>}">
                    @{BoardTile[,] boardAs2DArray = Model.Board.ConvertTo2DArray(); }
                    @if (ViewBag != null && ViewBag.FlipBoard == "true")
                    {
                        boardAs2DArray = Model.Board.Transpose2DArray(boardAs2DArray);
                    }

                    @for (int i = 0; i < boardAs2DArray.GetLength(0); i++)
                    {
                        <div id="row-@(i+1)" class="board_row">
                            @for (int j = 0; j < boardAs2DArray.GetLength(1); j++)
                            {

                                @if (boardAs2DArray[i, j] != null && boardAs2DArray[i, j].CharTile != null)
                                {
                                    <div id="tile_@(boardAs2DArray[i,j].BoardLocationX)_@(boardAs2DArray[i,j].BoardLocationY)"
                                         class="grid-item locked @(boardAs2DArray[i,j].BoardTileType.Type)">
                                        <div id="board_chartile_@(boardAs2DArray[i,j].CharTileID)" class="filled">
                                            <span class="board_chartile_letter">@boardAs2DArray[i, j].CharTile.Letter</span>
                                            <span class="board_chartile_score">@boardAs2DArray[i, j].CharTile.Score</span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div id="tile_@(boardAs2DArray[i,j].BoardLocationX)_@(boardAs2DArray[i,j].BoardLocationY)" class="grid-item @(boardAs2DArray[i,j].BoardTileType.Type)">
                                        <span id="board_chartile_0" class="emptyBoardTile">
                                            <br />
                                        </span>
                                    </div>
                                }
                            }
                        </div>
                    }
                </div>
                <div id="rightOutput" class="col-xs-12 col-sm-2 panel-group output">
                    @foreach (var player in playersOnRightSide)
                    {
                        <div id="player-@(player.ID)-log" class="playerLog col-xs-6 col-sm-12 panel panel-@(player.AtHand ? "primary" : "default")">
                            <div class="panel-heading">
                                <span>@(player.Name != null ? player.Name : ("Player " + player.ID)) @(player.Rack.ToString())</span>
                            </div>
                            <div class="panel-body">
                                @if (player.Moves.Count == 0)
                                {
                                    <span>No moves played.</span>
                                }
                                else
                                {
                                    <table class="table table-striped table-condensed">
                                        <thead>
                                            <tr>
                                                <th class="col-xs-11">Word</th>
                                                <th class="col-xs-1">Score</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td><strong>Total</strong></td>
                                                <td><strong>@player.Score</strong></td>
                                            </tr>
                                            @{ var moves = player.Moves.ToList();}
                                            @for (int i = 0; i < moves.Count; i++)
                                            {
                                                <tr id="@moves[moves.Count - 1 - i].GetStringForPage()" class="moveRowFromHistory @(moves[moves.Count - 1 - i].MoveNumber % 2 == 0 ? "moveNumberEven" : "moveNumberUneven")">
                                                    <td>@moves[moves.Count - 1 - i].Word</td>
                                                    <td>@moves[moves.Count - 1 - i].Score</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                            </div>
                        </div>
                    }
                </div>
                <div id="statusMessage" class="col-xs-12">
                </div>
                <div class="loadingSpinner"></div>
            </div>
        </div>
    </div>
</body>
</html>