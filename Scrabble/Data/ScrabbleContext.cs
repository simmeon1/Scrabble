using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Scrabble.Classes;

namespace Scrabble.Models
{
    public class ScrabbleContext : DbContext
    {
        public ScrabbleContext (DbContextOptions<ScrabbleContext> options)
            : base(options)
        {          
        }

        public DbSet<Scrabble.Models.Game> Games { get; set; }
        public DbSet<Scrabble.Models.Board> Boards { get; set; }
        public DbSet<Scrabble.Models.BoardTile> BoardTiles { get; set; }
        public DbSet<Scrabble.Models.CharTile> CharTiles { get; set; }
        public DbSet<Scrabble.Models.Pouch> Pouches { get; set; }
        public DbSet<Scrabble.Models.Rack> Racks { get; set; }
        public DbSet<Scrabble.Models.Move> Moves { get; set; }
        public DbSet<Scrabble.Models.Player> Players { get; set; }
        public DbSet<Scrabble.Models.Rack_CharTile> Rack_CharTiles { get; set; }
        public DbSet<Scrabble.Models.Pouch_CharTile> Pouch_CharTiles { get; set; }
        public DbSet<Scrabble.Models.GameLanguage> GameLanguages { get; set; }
        public DbSet<Scrabble.Models.WordDictionary> WordDictionaries { get; set; }
        public DbSet<Scrabble.Models.BotType> BotTypes { get; set; }
        public DbSet<Scrabble.Models.BoardTileType> BoardTileTypes { get; set; }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseLazyLoadingProxies();
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GameLanguage>().HasData(new GameLanguage { ID = LanguageEnum.English, Language = LanguageEnum.English.ToString(), CountOfLetters = 26 });
            modelBuilder.Entity<GameLanguage>().HasData(new GameLanguage { ID = LanguageEnum.Bulgarian, Language = LanguageEnum.Bulgarian.ToString(), CountOfLetters = 30 });


            modelBuilder.Entity<WordDictionary>().HasData(new WordDictionary { ID = 1, GameLanguageID = LanguageEnum.English });
            modelBuilder.Entity<WordDictionary>().HasData(new WordDictionary { ID = 2, GameLanguageID = LanguageEnum.Bulgarian });

            modelBuilder.Entity<Game>().HasData(new Game { ID = 1, GameLanguageID = LanguageEnum.English, BoardID = 1, PouchID = 1, WordDictionaryID = 1, Log = "Enjoy the game!" });
            modelBuilder.Entity<Game>().HasData(new Game { ID = 2, GameLanguageID = LanguageEnum.Bulgarian, BoardID = 2, PouchID = 2, WordDictionaryID = 2, Log = "Enjoy the game!" });


            modelBuilder.Entity<Board>().HasData(new Board { ID = 1, Rows = 15, Columns = 15, GameID = 1 });
            modelBuilder.Entity<Board>().HasData(new Board { ID = 2, Rows = 15, Columns = 15, GameID = 2 });


            modelBuilder.Entity<BoardTileType>().HasData(new BoardTileType { ID = BoardTileTypeEnum.Normal, Type = BoardTileTypeEnum.Normal.ToString() });
            modelBuilder.Entity<BoardTileType>().HasData(new BoardTileType { ID = BoardTileTypeEnum.Double_Letter, Type = BoardTileTypeEnum.Double_Letter.ToString() });
            modelBuilder.Entity<BoardTileType>().HasData(new BoardTileType { ID = BoardTileTypeEnum.Triple_Letter, Type = BoardTileTypeEnum.Triple_Letter.ToString() });
            modelBuilder.Entity<BoardTileType>().HasData(new BoardTileType { ID = BoardTileTypeEnum.Double_Word, Type = BoardTileTypeEnum.Double_Word.ToString()});
            modelBuilder.Entity<BoardTileType>().HasData(new BoardTileType { ID = BoardTileTypeEnum.Triple_Word, Type = BoardTileTypeEnum.Triple_Word.ToString() });
            modelBuilder.Entity<BoardTileType>().HasData(new BoardTileType { ID = BoardTileTypeEnum.Start, Type = BoardTileTypeEnum.Start.ToString() });

            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 1, BoardLocationX = 0, BoardLocationY = 0, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 2, BoardLocationX = 1, BoardLocationY = 0, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 3, BoardLocationX = 2, BoardLocationY = 0, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 4, BoardLocationX = 3, BoardLocationY = 0, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 5, BoardLocationX = 4, BoardLocationY = 0, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 6, BoardLocationX = 5, BoardLocationY = 0, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 7, BoardLocationX = 6, BoardLocationY = 0, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 8, BoardLocationX = 7, BoardLocationY = 0, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 9, BoardLocationX = 8, BoardLocationY = 0, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 10, BoardLocationX = 9, BoardLocationY = 0, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 11, BoardLocationX = 10, BoardLocationY = 0, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 12, BoardLocationX = 11, BoardLocationY = 0, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 13, BoardLocationX = 12, BoardLocationY = 0, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 14, BoardLocationX = 13, BoardLocationY = 0, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 15, BoardLocationX = 14, BoardLocationY = 0, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 16, BoardLocationX = 0, BoardLocationY = 1, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 17, BoardLocationX = 1, BoardLocationY = 1, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 18, BoardLocationX = 2, BoardLocationY = 1, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 19, BoardLocationX = 3, BoardLocationY = 1, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 20, BoardLocationX = 4, BoardLocationY = 1, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 21, BoardLocationX = 5, BoardLocationY = 1, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 22, BoardLocationX = 6, BoardLocationY = 1, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 23, BoardLocationX = 7, BoardLocationY = 1, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 24, BoardLocationX = 8, BoardLocationY = 1, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 25, BoardLocationX = 9, BoardLocationY = 1, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 26, BoardLocationX = 10, BoardLocationY = 1, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 27, BoardLocationX = 11, BoardLocationY = 1, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 28, BoardLocationX = 12, BoardLocationY = 1, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 29, BoardLocationX = 13, BoardLocationY = 1, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 30, BoardLocationX = 14, BoardLocationY = 1, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 31, BoardLocationX = 0, BoardLocationY = 2, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 32, BoardLocationX = 1, BoardLocationY = 2, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 33, BoardLocationX = 2, BoardLocationY = 2, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 34, BoardLocationX = 3, BoardLocationY = 2, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 35, BoardLocationX = 4, BoardLocationY = 2, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 36, BoardLocationX = 5, BoardLocationY = 2, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 37, BoardLocationX = 6, BoardLocationY = 2, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 38, BoardLocationX = 7, BoardLocationY = 2, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 39, BoardLocationX = 8, BoardLocationY = 2, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 40, BoardLocationX = 9, BoardLocationY = 2, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 41, BoardLocationX = 10, BoardLocationY = 2, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 42, BoardLocationX = 11, BoardLocationY = 2, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 43, BoardLocationX = 12, BoardLocationY = 2, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 44, BoardLocationX = 13, BoardLocationY = 2, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 45, BoardLocationX = 14, BoardLocationY = 2, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 46, BoardLocationX = 0, BoardLocationY = 3, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 47, BoardLocationX = 1, BoardLocationY = 3, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 48, BoardLocationX = 2, BoardLocationY = 3, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 49, BoardLocationX = 3, BoardLocationY = 3, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 50, BoardLocationX = 4, BoardLocationY = 3, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 51, BoardLocationX = 5, BoardLocationY = 3, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 52, BoardLocationX = 6, BoardLocationY = 3, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 53, BoardLocationX = 7, BoardLocationY = 3, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 54, BoardLocationX = 8, BoardLocationY = 3, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 55, BoardLocationX = 9, BoardLocationY = 3, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 56, BoardLocationX = 10, BoardLocationY = 3, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 57, BoardLocationX = 11, BoardLocationY = 3, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 58, BoardLocationX = 12, BoardLocationY = 3, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 59, BoardLocationX = 13, BoardLocationY = 3, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 60, BoardLocationX = 14, BoardLocationY = 3, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 61, BoardLocationX = 0, BoardLocationY = 4, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 62, BoardLocationX = 1, BoardLocationY = 4, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 63, BoardLocationX = 2, BoardLocationY = 4, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 64, BoardLocationX = 3, BoardLocationY = 4, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 65, BoardLocationX = 4, BoardLocationY = 4, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 66, BoardLocationX = 5, BoardLocationY = 4, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 67, BoardLocationX = 6, BoardLocationY = 4, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 68, BoardLocationX = 7, BoardLocationY = 4, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 69, BoardLocationX = 8, BoardLocationY = 4, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 70, BoardLocationX = 9, BoardLocationY = 4, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 71, BoardLocationX = 10, BoardLocationY = 4, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 72, BoardLocationX = 11, BoardLocationY = 4, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 73, BoardLocationX = 12, BoardLocationY = 4, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 74, BoardLocationX = 13, BoardLocationY = 4, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 75, BoardLocationX = 14, BoardLocationY = 4, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 76, BoardLocationX = 0, BoardLocationY = 5, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 77, BoardLocationX = 1, BoardLocationY = 5, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 78, BoardLocationX = 2, BoardLocationY = 5, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 79, BoardLocationX = 3, BoardLocationY = 5, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 80, BoardLocationX = 4, BoardLocationY = 5, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 81, BoardLocationX = 5, BoardLocationY = 5, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 82, BoardLocationX = 6, BoardLocationY = 5, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 83, BoardLocationX = 7, BoardLocationY = 5, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 84, BoardLocationX = 8, BoardLocationY = 5, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 85, BoardLocationX = 9, BoardLocationY = 5, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 86, BoardLocationX = 10, BoardLocationY = 5, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 87, BoardLocationX = 11, BoardLocationY = 5, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 88, BoardLocationX = 12, BoardLocationY = 5, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 89, BoardLocationX = 13, BoardLocationY = 5, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 90, BoardLocationX = 14, BoardLocationY = 5, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 91, BoardLocationX = 0, BoardLocationY = 6, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 92, BoardLocationX = 1, BoardLocationY = 6, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 93, BoardLocationX = 2, BoardLocationY = 6, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 94, BoardLocationX = 3, BoardLocationY = 6, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 95, BoardLocationX = 4, BoardLocationY = 6, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 96, BoardLocationX = 5, BoardLocationY = 6, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 97, BoardLocationX = 6, BoardLocationY = 6, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 98, BoardLocationX = 7, BoardLocationY = 6, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 99, BoardLocationX = 8, BoardLocationY = 6, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 100, BoardLocationX = 9, BoardLocationY = 6, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 101, BoardLocationX = 10, BoardLocationY = 6, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 102, BoardLocationX = 11, BoardLocationY = 6, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 103, BoardLocationX = 12, BoardLocationY = 6, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 104, BoardLocationX = 13, BoardLocationY = 6, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 105, BoardLocationX = 14, BoardLocationY = 6, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 106, BoardLocationX = 0, BoardLocationY = 7, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 107, BoardLocationX = 1, BoardLocationY = 7, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 108, BoardLocationX = 2, BoardLocationY = 7, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 109, BoardLocationX = 3, BoardLocationY = 7, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 110, BoardLocationX = 4, BoardLocationY = 7, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 111, BoardLocationX = 5, BoardLocationY = 7, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 112, BoardLocationX = 6, BoardLocationY = 7, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 113, BoardLocationX = 7, BoardLocationY = 7, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Start });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 114, BoardLocationX = 8, BoardLocationY = 7, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 115, BoardLocationX = 9, BoardLocationY = 7, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 116, BoardLocationX = 10, BoardLocationY = 7, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 117, BoardLocationX = 11, BoardLocationY = 7, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 118, BoardLocationX = 12, BoardLocationY = 7, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 119, BoardLocationX = 13, BoardLocationY = 7, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 120, BoardLocationX = 14, BoardLocationY = 7, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 121, BoardLocationX = 0, BoardLocationY = 8, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 122, BoardLocationX = 1, BoardLocationY = 8, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 123, BoardLocationX = 2, BoardLocationY = 8, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 124, BoardLocationX = 3, BoardLocationY = 8, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 125, BoardLocationX = 4, BoardLocationY = 8, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 126, BoardLocationX = 5, BoardLocationY = 8, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 127, BoardLocationX = 6, BoardLocationY = 8, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 128, BoardLocationX = 7, BoardLocationY = 8, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 129, BoardLocationX = 8, BoardLocationY = 8, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 130, BoardLocationX = 9, BoardLocationY = 8, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 131, BoardLocationX = 10, BoardLocationY = 8, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 132, BoardLocationX = 11, BoardLocationY = 8, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 133, BoardLocationX = 12, BoardLocationY = 8, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 134, BoardLocationX = 13, BoardLocationY = 8, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 135, BoardLocationX = 14, BoardLocationY = 8, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 136, BoardLocationX = 0, BoardLocationY = 9, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 137, BoardLocationX = 1, BoardLocationY = 9, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 138, BoardLocationX = 2, BoardLocationY = 9, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 139, BoardLocationX = 3, BoardLocationY = 9, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 140, BoardLocationX = 4, BoardLocationY = 9, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 141, BoardLocationX = 5, BoardLocationY = 9, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 142, BoardLocationX = 6, BoardLocationY = 9, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 143, BoardLocationX = 7, BoardLocationY = 9, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 144, BoardLocationX = 8, BoardLocationY = 9, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 145, BoardLocationX = 9, BoardLocationY = 9, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 146, BoardLocationX = 10, BoardLocationY = 9, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 147, BoardLocationX = 11, BoardLocationY = 9, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 148, BoardLocationX = 12, BoardLocationY = 9, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 149, BoardLocationX = 13, BoardLocationY = 9, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 150, BoardLocationX = 14, BoardLocationY = 9, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 151, BoardLocationX = 0, BoardLocationY = 10, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 152, BoardLocationX = 1, BoardLocationY = 10, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 153, BoardLocationX = 2, BoardLocationY = 10, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 154, BoardLocationX = 3, BoardLocationY = 10, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 155, BoardLocationX = 4, BoardLocationY = 10, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 156, BoardLocationX = 5, BoardLocationY = 10, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 157, BoardLocationX = 6, BoardLocationY = 10, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 158, BoardLocationX = 7, BoardLocationY = 10, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 159, BoardLocationX = 8, BoardLocationY = 10, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 160, BoardLocationX = 9, BoardLocationY = 10, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 161, BoardLocationX = 10, BoardLocationY = 10, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 162, BoardLocationX = 11, BoardLocationY = 10, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 163, BoardLocationX = 12, BoardLocationY = 10, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 164, BoardLocationX = 13, BoardLocationY = 10, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 165, BoardLocationX = 14, BoardLocationY = 10, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 166, BoardLocationX = 0, BoardLocationY = 11, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 167, BoardLocationX = 1, BoardLocationY = 11, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 168, BoardLocationX = 2, BoardLocationY = 11, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 169, BoardLocationX = 3, BoardLocationY = 11, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 170, BoardLocationX = 4, BoardLocationY = 11, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 171, BoardLocationX = 5, BoardLocationY = 11, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 172, BoardLocationX = 6, BoardLocationY = 11, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 173, BoardLocationX = 7, BoardLocationY = 11, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 174, BoardLocationX = 8, BoardLocationY = 11, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 175, BoardLocationX = 9, BoardLocationY = 11, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 176, BoardLocationX = 10, BoardLocationY = 11, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 177, BoardLocationX = 11, BoardLocationY = 11, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 178, BoardLocationX = 12, BoardLocationY = 11, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 179, BoardLocationX = 13, BoardLocationY = 11, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 180, BoardLocationX = 14, BoardLocationY = 11, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 181, BoardLocationX = 0, BoardLocationY = 12, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 182, BoardLocationX = 1, BoardLocationY = 12, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 183, BoardLocationX = 2, BoardLocationY = 12, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 184, BoardLocationX = 3, BoardLocationY = 12, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 185, BoardLocationX = 4, BoardLocationY = 12, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 186, BoardLocationX = 5, BoardLocationY = 12, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 187, BoardLocationX = 6, BoardLocationY = 12, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 188, BoardLocationX = 7, BoardLocationY = 12, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 189, BoardLocationX = 8, BoardLocationY = 12, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 190, BoardLocationX = 9, BoardLocationY = 12, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 191, BoardLocationX = 10, BoardLocationY = 12, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 192, BoardLocationX = 11, BoardLocationY = 12, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 193, BoardLocationX = 12, BoardLocationY = 12, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 194, BoardLocationX = 13, BoardLocationY = 12, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 195, BoardLocationX = 14, BoardLocationY = 12, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 196, BoardLocationX = 0, BoardLocationY = 13, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 197, BoardLocationX = 1, BoardLocationY = 13, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 198, BoardLocationX = 2, BoardLocationY = 13, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 199, BoardLocationX = 3, BoardLocationY = 13, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 200, BoardLocationX = 4, BoardLocationY = 13, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 201, BoardLocationX = 5, BoardLocationY = 13, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 202, BoardLocationX = 6, BoardLocationY = 13, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 203, BoardLocationX = 7, BoardLocationY = 13, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 204, BoardLocationX = 8, BoardLocationY = 13, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 205, BoardLocationX = 9, BoardLocationY = 13, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 206, BoardLocationX = 10, BoardLocationY = 13, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 207, BoardLocationX = 11, BoardLocationY = 13, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 208, BoardLocationX = 12, BoardLocationY = 13, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 209, BoardLocationX = 13, BoardLocationY = 13, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 210, BoardLocationX = 14, BoardLocationY = 13, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 211, BoardLocationX = 0, BoardLocationY = 14, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 212, BoardLocationX = 1, BoardLocationY = 14, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 213, BoardLocationX = 2, BoardLocationY = 14, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 214, BoardLocationX = 3, BoardLocationY = 14, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 215, BoardLocationX = 4, BoardLocationY = 14, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 216, BoardLocationX = 5, BoardLocationY = 14, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 217, BoardLocationX = 6, BoardLocationY = 14, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 218, BoardLocationX = 7, BoardLocationY = 14, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 219, BoardLocationX = 8, BoardLocationY = 14, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 220, BoardLocationX = 9, BoardLocationY = 14, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 221, BoardLocationX = 10, BoardLocationY = 14, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 222, BoardLocationX = 11, BoardLocationY = 14, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 223, BoardLocationX = 12, BoardLocationY = 14, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 224, BoardLocationX = 13, BoardLocationY = 14, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 225, BoardLocationX = 14, BoardLocationY = 14, BoardID = 1, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });

            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 226, BoardLocationX = 0, BoardLocationY = 0, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 227, BoardLocationX = 1, BoardLocationY = 0, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 228, BoardLocationX = 2, BoardLocationY = 0, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 229, BoardLocationX = 3, BoardLocationY = 0, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 230, BoardLocationX = 4, BoardLocationY = 0, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 231, BoardLocationX = 5, BoardLocationY = 0, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 232, BoardLocationX = 6, BoardLocationY = 0, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 233, BoardLocationX = 7, BoardLocationY = 0, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 234, BoardLocationX = 8, BoardLocationY = 0, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 235, BoardLocationX = 9, BoardLocationY = 0, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 236, BoardLocationX = 10, BoardLocationY = 0, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 237, BoardLocationX = 11, BoardLocationY = 0, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 238, BoardLocationX = 12, BoardLocationY = 0, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 239, BoardLocationX = 13, BoardLocationY = 0, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 240, BoardLocationX = 14, BoardLocationY = 0, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 241, BoardLocationX = 0, BoardLocationY = 1, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 242, BoardLocationX = 1, BoardLocationY = 1, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 243, BoardLocationX = 2, BoardLocationY = 1, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 244, BoardLocationX = 3, BoardLocationY = 1, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 245, BoardLocationX = 4, BoardLocationY = 1, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 246, BoardLocationX = 5, BoardLocationY = 1, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 247, BoardLocationX = 6, BoardLocationY = 1, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 248, BoardLocationX = 7, BoardLocationY = 1, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 249, BoardLocationX = 8, BoardLocationY = 1, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 250, BoardLocationX = 9, BoardLocationY = 1, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 251, BoardLocationX = 10, BoardLocationY = 1, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 252, BoardLocationX = 11, BoardLocationY = 1, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 253, BoardLocationX = 12, BoardLocationY = 1, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 254, BoardLocationX = 13, BoardLocationY = 1, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 255, BoardLocationX = 14, BoardLocationY = 1, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 256, BoardLocationX = 0, BoardLocationY = 2, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 257, BoardLocationX = 1, BoardLocationY = 2, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 258, BoardLocationX = 2, BoardLocationY = 2, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 259, BoardLocationX = 3, BoardLocationY = 2, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 260, BoardLocationX = 4, BoardLocationY = 2, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 261, BoardLocationX = 5, BoardLocationY = 2, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 262, BoardLocationX = 6, BoardLocationY = 2, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 263, BoardLocationX = 7, BoardLocationY = 2, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 264, BoardLocationX = 8, BoardLocationY = 2, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 265, BoardLocationX = 9, BoardLocationY = 2, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 266, BoardLocationX = 10, BoardLocationY = 2, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 267, BoardLocationX = 11, BoardLocationY = 2, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 268, BoardLocationX = 12, BoardLocationY = 2, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 269, BoardLocationX = 13, BoardLocationY = 2, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 270, BoardLocationX = 14, BoardLocationY = 2, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 271, BoardLocationX = 0, BoardLocationY = 3, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 272, BoardLocationX = 1, BoardLocationY = 3, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 273, BoardLocationX = 2, BoardLocationY = 3, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 274, BoardLocationX = 3, BoardLocationY = 3, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 275, BoardLocationX = 4, BoardLocationY = 3, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 276, BoardLocationX = 5, BoardLocationY = 3, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 277, BoardLocationX = 6, BoardLocationY = 3, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 278, BoardLocationX = 7, BoardLocationY = 3, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 279, BoardLocationX = 8, BoardLocationY = 3, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 280, BoardLocationX = 9, BoardLocationY = 3, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 281, BoardLocationX = 10, BoardLocationY = 3, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 282, BoardLocationX = 11, BoardLocationY = 3, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 283, BoardLocationX = 12, BoardLocationY = 3, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 284, BoardLocationX = 13, BoardLocationY = 3, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 285, BoardLocationX = 14, BoardLocationY = 3, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 286, BoardLocationX = 0, BoardLocationY = 4, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 287, BoardLocationX = 1, BoardLocationY = 4, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 288, BoardLocationX = 2, BoardLocationY = 4, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 289, BoardLocationX = 3, BoardLocationY = 4, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 290, BoardLocationX = 4, BoardLocationY = 4, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 291, BoardLocationX = 5, BoardLocationY = 4, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 292, BoardLocationX = 6, BoardLocationY = 4, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 293, BoardLocationX = 7, BoardLocationY = 4, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 294, BoardLocationX = 8, BoardLocationY = 4, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 295, BoardLocationX = 9, BoardLocationY = 4, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 296, BoardLocationX = 10, BoardLocationY = 4, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 297, BoardLocationX = 11, BoardLocationY = 4, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 298, BoardLocationX = 12, BoardLocationY = 4, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 299, BoardLocationX = 13, BoardLocationY = 4, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 300, BoardLocationX = 14, BoardLocationY = 4, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 301, BoardLocationX = 0, BoardLocationY = 5, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 302, BoardLocationX = 1, BoardLocationY = 5, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 303, BoardLocationX = 2, BoardLocationY = 5, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 304, BoardLocationX = 3, BoardLocationY = 5, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 305, BoardLocationX = 4, BoardLocationY = 5, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 306, BoardLocationX = 5, BoardLocationY = 5, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 307, BoardLocationX = 6, BoardLocationY = 5, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 308, BoardLocationX = 7, BoardLocationY = 5, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 309, BoardLocationX = 8, BoardLocationY = 5, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 310, BoardLocationX = 9, BoardLocationY = 5, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 311, BoardLocationX = 10, BoardLocationY = 5, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 312, BoardLocationX = 11, BoardLocationY = 5, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 313, BoardLocationX = 12, BoardLocationY = 5, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 314, BoardLocationX = 13, BoardLocationY = 5, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 315, BoardLocationX = 14, BoardLocationY = 5, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 316, BoardLocationX = 0, BoardLocationY = 6, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 317, BoardLocationX = 1, BoardLocationY = 6, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 318, BoardLocationX = 2, BoardLocationY = 6, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 319, BoardLocationX = 3, BoardLocationY = 6, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 320, BoardLocationX = 4, BoardLocationY = 6, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 321, BoardLocationX = 5, BoardLocationY = 6, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 322, BoardLocationX = 6, BoardLocationY = 6, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 323, BoardLocationX = 7, BoardLocationY = 6, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 324, BoardLocationX = 8, BoardLocationY = 6, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 325, BoardLocationX = 9, BoardLocationY = 6, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 326, BoardLocationX = 10, BoardLocationY = 6, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 327, BoardLocationX = 11, BoardLocationY = 6, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 328, BoardLocationX = 12, BoardLocationY = 6, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 329, BoardLocationX = 13, BoardLocationY = 6, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 330, BoardLocationX = 14, BoardLocationY = 6, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 331, BoardLocationX = 0, BoardLocationY = 7, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 332, BoardLocationX = 1, BoardLocationY = 7, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 333, BoardLocationX = 2, BoardLocationY = 7, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 334, BoardLocationX = 3, BoardLocationY = 7, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 335, BoardLocationX = 4, BoardLocationY = 7, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 336, BoardLocationX = 5, BoardLocationY = 7, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 337, BoardLocationX = 6, BoardLocationY = 7, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 338, BoardLocationX = 7, BoardLocationY = 7, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Start });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 339, BoardLocationX = 8, BoardLocationY = 7, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 340, BoardLocationX = 9, BoardLocationY = 7, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 341, BoardLocationX = 10, BoardLocationY = 7, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 342, BoardLocationX = 11, BoardLocationY = 7, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 343, BoardLocationX = 12, BoardLocationY = 7, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 344, BoardLocationX = 13, BoardLocationY = 7, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 345, BoardLocationX = 14, BoardLocationY = 7, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 346, BoardLocationX = 0, BoardLocationY = 8, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 347, BoardLocationX = 1, BoardLocationY = 8, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 348, BoardLocationX = 2, BoardLocationY = 8, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 349, BoardLocationX = 3, BoardLocationY = 8, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 350, BoardLocationX = 4, BoardLocationY = 8, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 351, BoardLocationX = 5, BoardLocationY = 8, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 352, BoardLocationX = 6, BoardLocationY = 8, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 353, BoardLocationX = 7, BoardLocationY = 8, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 354, BoardLocationX = 8, BoardLocationY = 8, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 355, BoardLocationX = 9, BoardLocationY = 8, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 356, BoardLocationX = 10, BoardLocationY = 8, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 357, BoardLocationX = 11, BoardLocationY = 8, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 358, BoardLocationX = 12, BoardLocationY = 8, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 359, BoardLocationX = 13, BoardLocationY = 8, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 360, BoardLocationX = 14, BoardLocationY = 8, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 361, BoardLocationX = 0, BoardLocationY = 9, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 362, BoardLocationX = 1, BoardLocationY = 9, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 363, BoardLocationX = 2, BoardLocationY = 9, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 364, BoardLocationX = 3, BoardLocationY = 9, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 365, BoardLocationX = 4, BoardLocationY = 9, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 366, BoardLocationX = 5, BoardLocationY = 9, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 367, BoardLocationX = 6, BoardLocationY = 9, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 368, BoardLocationX = 7, BoardLocationY = 9, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 369, BoardLocationX = 8, BoardLocationY = 9, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 370, BoardLocationX = 9, BoardLocationY = 9, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 371, BoardLocationX = 10, BoardLocationY = 9, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 372, BoardLocationX = 11, BoardLocationY = 9, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 373, BoardLocationX = 12, BoardLocationY = 9, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 374, BoardLocationX = 13, BoardLocationY = 9, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 375, BoardLocationX = 14, BoardLocationY = 9, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 376, BoardLocationX = 0, BoardLocationY = 10, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 377, BoardLocationX = 1, BoardLocationY = 10, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 378, BoardLocationX = 2, BoardLocationY = 10, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 379, BoardLocationX = 3, BoardLocationY = 10, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 380, BoardLocationX = 4, BoardLocationY = 10, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 381, BoardLocationX = 5, BoardLocationY = 10, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 382, BoardLocationX = 6, BoardLocationY = 10, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 383, BoardLocationX = 7, BoardLocationY = 10, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 384, BoardLocationX = 8, BoardLocationY = 10, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 385, BoardLocationX = 9, BoardLocationY = 10, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 386, BoardLocationX = 10, BoardLocationY = 10, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 387, BoardLocationX = 11, BoardLocationY = 10, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 388, BoardLocationX = 12, BoardLocationY = 10, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 389, BoardLocationX = 13, BoardLocationY = 10, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 390, BoardLocationX = 14, BoardLocationY = 10, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 391, BoardLocationX = 0, BoardLocationY = 11, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 392, BoardLocationX = 1, BoardLocationY = 11, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 393, BoardLocationX = 2, BoardLocationY = 11, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 394, BoardLocationX = 3, BoardLocationY = 11, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 395, BoardLocationX = 4, BoardLocationY = 11, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 396, BoardLocationX = 5, BoardLocationY = 11, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 397, BoardLocationX = 6, BoardLocationY = 11, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 398, BoardLocationX = 7, BoardLocationY = 11, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 399, BoardLocationX = 8, BoardLocationY = 11, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 400, BoardLocationX = 9, BoardLocationY = 11, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 401, BoardLocationX = 10, BoardLocationY = 11, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 402, BoardLocationX = 11, BoardLocationY = 11, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 403, BoardLocationX = 12, BoardLocationY = 11, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 404, BoardLocationX = 13, BoardLocationY = 11, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 405, BoardLocationX = 14, BoardLocationY = 11, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 406, BoardLocationX = 0, BoardLocationY = 12, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 407, BoardLocationX = 1, BoardLocationY = 12, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 408, BoardLocationX = 2, BoardLocationY = 12, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 409, BoardLocationX = 3, BoardLocationY = 12, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 410, BoardLocationX = 4, BoardLocationY = 12, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 411, BoardLocationX = 5, BoardLocationY = 12, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 412, BoardLocationX = 6, BoardLocationY = 12, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 413, BoardLocationX = 7, BoardLocationY = 12, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 414, BoardLocationX = 8, BoardLocationY = 12, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 415, BoardLocationX = 9, BoardLocationY = 12, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 416, BoardLocationX = 10, BoardLocationY = 12, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 417, BoardLocationX = 11, BoardLocationY = 12, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 418, BoardLocationX = 12, BoardLocationY = 12, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 419, BoardLocationX = 13, BoardLocationY = 12, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 420, BoardLocationX = 14, BoardLocationY = 12, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 421, BoardLocationX = 0, BoardLocationY = 13, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 422, BoardLocationX = 1, BoardLocationY = 13, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 423, BoardLocationX = 2, BoardLocationY = 13, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 424, BoardLocationX = 3, BoardLocationY = 13, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 425, BoardLocationX = 4, BoardLocationY = 13, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 426, BoardLocationX = 5, BoardLocationY = 13, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 427, BoardLocationX = 6, BoardLocationY = 13, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 428, BoardLocationX = 7, BoardLocationY = 13, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 429, BoardLocationX = 8, BoardLocationY = 13, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 430, BoardLocationX = 9, BoardLocationY = 13, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 431, BoardLocationX = 10, BoardLocationY = 13, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 432, BoardLocationX = 11, BoardLocationY = 13, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 433, BoardLocationX = 12, BoardLocationY = 13, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 434, BoardLocationX = 13, BoardLocationY = 13, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 435, BoardLocationX = 14, BoardLocationY = 13, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 436, BoardLocationX = 0, BoardLocationY = 14, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 437, BoardLocationX = 1, BoardLocationY = 14, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 438, BoardLocationX = 2, BoardLocationY = 14, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 439, BoardLocationX = 3, BoardLocationY = 14, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 440, BoardLocationX = 4, BoardLocationY = 14, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 441, BoardLocationX = 5, BoardLocationY = 14, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 442, BoardLocationX = 6, BoardLocationY = 14, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 443, BoardLocationX = 7, BoardLocationY = 14, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 444, BoardLocationX = 8, BoardLocationY = 14, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 445, BoardLocationX = 9, BoardLocationY = 14, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 446, BoardLocationX = 10, BoardLocationY = 14, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 447, BoardLocationX = 11, BoardLocationY = 14, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Double_Letter });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 448, BoardLocationX = 12, BoardLocationY = 14, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 449, BoardLocationX = 13, BoardLocationY = 14, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Normal });
            modelBuilder.Entity<BoardTile>().HasData(new BoardTile { ID = 450, BoardLocationX = 14, BoardLocationY = 14, BoardID = 2, BoardTileTypeID = BoardTileTypeEnum.Triple_Word });

            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 1, Letter = '*', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 2, Letter = 'A', Score = 1, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 3, Letter = 'B', Score = 3, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 4, Letter = 'C', Score = 3, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 5, Letter = 'D', Score = 2, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 6, Letter = 'E', Score = 1, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 7, Letter = 'F', Score = 4, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 8, Letter = 'G', Score = 2, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 9, Letter = 'H', Score = 4, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 10, Letter = 'I', Score = 1, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 11, Letter = 'J', Score = 8, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 12, Letter = 'K', Score = 5, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 13, Letter = 'L', Score = 1, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 14, Letter = 'M', Score = 3, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 15, Letter = 'N', Score = 1, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 16, Letter = 'O', Score = 1, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 17, Letter = 'P', Score = 3, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 18, Letter = 'Q', Score = 10, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 19, Letter = 'R', Score = 1, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 20, Letter = 'S', Score = 1, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 21, Letter = 'T', Score = 1, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 22, Letter = 'U', Score = 1, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 23, Letter = 'V', Score = 4, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 24, Letter = 'W', Score = 4, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 25, Letter = 'X', Score = 8, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 26, Letter = 'Y', Score = 4, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 27, Letter = 'Z', Score = 10, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 28, Letter = 'A', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 29, Letter = 'B', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 30, Letter = 'C', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 31, Letter = 'D', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 32, Letter = 'E', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 33, Letter = 'F', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 34, Letter = 'G', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 35, Letter = 'H', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 36, Letter = 'I', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 37, Letter = 'J', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 38, Letter = 'K', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 39, Letter = 'L', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 40, Letter = 'M', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 41, Letter = 'N', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 42, Letter = 'O', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 43, Letter = 'P', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 44, Letter = 'Q', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 45, Letter = 'R', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 46, Letter = 'S', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 47, Letter = 'T', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 48, Letter = 'U', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 49, Letter = 'V', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 50, Letter = 'W', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 51, Letter = 'X', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 52, Letter = 'Y', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 53, Letter = 'Z', Score = 0, GameLanguageID = LanguageEnum.English, WordDictionaryID = 1 });

            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 54, Letter = '*', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 55, Letter = 'А', Score = 1, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 56, Letter = 'Б', Score = 2, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 57, Letter = 'В', Score = 2, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 58, Letter = 'Г', Score = 3, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 59, Letter = 'Д', Score = 2, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 60, Letter = 'Е', Score = 1, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 61, Letter = 'Ж', Score = 4, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 62, Letter = 'З', Score = 4, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 63, Letter = 'И', Score = 1, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 64, Letter = 'Й', Score = 5, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 65, Letter = 'К', Score = 2, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 66, Letter = 'Л', Score = 2, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 67, Letter = 'М', Score = 2, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 68, Letter = 'Н', Score = 1, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 69, Letter = 'О', Score = 1, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 70, Letter = 'П', Score = 1, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 71, Letter = 'Р', Score = 1, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 72, Letter = 'С', Score = 1, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 73, Letter = 'Т', Score = 1, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 74, Letter = 'У', Score = 5, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 75, Letter = 'Ф', Score = 10, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 76, Letter = 'Х', Score = 5, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 77, Letter = 'Ц', Score = 8, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 78, Letter = 'Ч', Score = 5, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 79, Letter = 'Ш', Score = 8, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 80, Letter = 'Щ', Score = 10, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 81, Letter = 'Ъ', Score = 3, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 82, Letter = 'Ь', Score = 10, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 83, Letter = 'Ю', Score = 8, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 84, Letter = 'Я', Score = 5, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 85, Letter = 'А', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 86, Letter = 'Б', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 87, Letter = 'В', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 88, Letter = 'Г', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 89, Letter = 'Д', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 90, Letter = 'Е', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 91, Letter = 'Ж', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 92, Letter = 'З', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 93, Letter = 'И', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 94, Letter = 'Й', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 95, Letter = 'К', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 96, Letter = 'Л', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 97, Letter = 'М', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 98, Letter = 'Н', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 99, Letter = 'О', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 100, Letter = 'П', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 101, Letter = 'Р', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 102, Letter = 'С', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 103, Letter = 'Т', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 104, Letter = 'У', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 105, Letter = 'Ф', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 106, Letter = 'Х', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 107, Letter = 'Ц', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 108, Letter = 'Ч', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 109, Letter = 'Ш', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 110, Letter = 'Щ', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 111, Letter = 'Ъ', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 112, Letter = 'Ь', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 113, Letter = 'Ю', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });
            modelBuilder.Entity<CharTile>().HasData(new CharTile { ID = 114, Letter = 'Я', Score = 0, GameLanguageID = LanguageEnum.Bulgarian, WordDictionaryID = 2 });

            modelBuilder.Entity<Pouch>().HasData(new Pouch { ID = 1, GameID = 1 });
            modelBuilder.Entity<Pouch>().HasData(new Pouch { ID = 2, GameID = 2 });

            modelBuilder.Entity<BotType>().HasData(new BotType { ID = BotTypeEnum.High_Scorer, Type = BotTypeEnum.High_Scorer.ToString() });
            modelBuilder.Entity<BotType>().HasData(new BotType { ID = BotTypeEnum.Rack_Balancer, Type = BotTypeEnum.Rack_Balancer.ToString() });

            modelBuilder.Entity<Player>().HasData(new Player { ID = 1, IsHuman = true, Score = 0, GameID = 1, RackID = 1, PouchID = 1, AtHand = true, Name = "Simeon" });
            modelBuilder.Entity<Player>().HasData(new Player { ID = 2, IsHuman = false, Score = 0, GameID = 1, RackID = 2, PouchID = 1, AtHand = false, Name = "High Scorer Bot", BotTypeID = BotTypeEnum.High_Scorer });
            modelBuilder.Entity<Player>().HasData(new Player { ID = 3, IsHuman = true, Score = 0, GameID = 1, RackID = 3, PouchID = 1, AtHand = false, Name = "Dobromir" });
            modelBuilder.Entity<Player>().HasData(new Player { ID = 4, IsHuman = false, Score = 0, GameID = 1, RackID = 4, PouchID = 1, AtHand = false, Name = "Rack Balancer Bot", BotTypeID = BotTypeEnum.Rack_Balancer });
            modelBuilder.Entity<Player>().HasData(new Player { ID = 5, IsHuman = true, Score = 0, GameID = 2, RackID = 5, PouchID = 2, AtHand = true, Name = "Simeon" });
            modelBuilder.Entity<Player>().HasData(new Player { ID = 6, IsHuman = false, Score = 0, GameID = 2, RackID = 6, PouchID = 2, AtHand = false, Name = "High Scorer Bot", BotTypeID = BotTypeEnum.High_Scorer });

            modelBuilder.Entity<Rack>().HasData(new Rack { ID = 1, PouchID = 1, RackSize = 7, GameID = 1, PlayerID = 1 });
            modelBuilder.Entity<Rack>().HasData(new Rack { ID = 2, PouchID = 1, RackSize = 7, GameID = 1, PlayerID = 2 });
            modelBuilder.Entity<Rack>().HasData(new Rack { ID = 3, PouchID = 1, RackSize = 7, GameID = 1, PlayerID = 3 });
            modelBuilder.Entity<Rack>().HasData(new Rack { ID = 4, PouchID = 1, RackSize = 7, GameID = 1, PlayerID = 4 });
            modelBuilder.Entity<Rack>().HasData(new Rack { ID = 5, PouchID = 2, RackSize = 7, GameID = 2, PlayerID = 5 });
            modelBuilder.Entity<Rack>().HasData(new Rack { ID = 6, PouchID = 2, RackSize = 7, GameID = 2, PlayerID = 6 });

            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 1, PouchID = 1, CharTileID = 1, Count = 0 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 2, PouchID = 1, CharTileID = 2, Count = 9 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 3, PouchID = 1, CharTileID = 3, Count = 2 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 4, PouchID = 1, CharTileID = 4, Count = 2 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 5, PouchID = 1, CharTileID = 5, Count = 4 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 6, PouchID = 1, CharTileID = 6, Count = 12 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 7, PouchID = 1, CharTileID = 7, Count = 2 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 8, PouchID = 1, CharTileID = 8, Count = 3 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 9, PouchID = 1, CharTileID = 9, Count = 2 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 10, PouchID = 1, CharTileID = 10, Count = 9 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 11, PouchID = 1, CharTileID = 11, Count = 1 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 12, PouchID = 1, CharTileID = 12, Count = 1 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 13, PouchID = 1, CharTileID = 13, Count = 4 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 14, PouchID = 1, CharTileID = 14, Count = 2 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 15, PouchID = 1, CharTileID = 15, Count = 6 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 16, PouchID = 1, CharTileID = 16, Count = 8 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 17, PouchID = 1, CharTileID = 17, Count = 2 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 18, PouchID = 1, CharTileID = 18, Count = 1 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 19, PouchID = 1, CharTileID = 19, Count = 6 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 20, PouchID = 1, CharTileID = 20, Count = 4 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 21, PouchID = 1, CharTileID = 21, Count = 6 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 22, PouchID = 1, CharTileID = 22, Count = 4 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 23, PouchID = 1, CharTileID = 23, Count = 2 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 24, PouchID = 1, CharTileID = 24, Count = 2 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 25, PouchID = 1, CharTileID = 25, Count = 1 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 26, PouchID = 1, CharTileID = 26, Count = 2 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 27, PouchID = 1, CharTileID = 27, Count = 1 });

            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 54, PouchID = 2, CharTileID = 54, Count = 0 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 55, PouchID = 2, CharTileID = 55, Count = 12 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 56, PouchID = 2, CharTileID = 56, Count = 3 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 57, PouchID = 2, CharTileID = 57, Count = 4 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 58, PouchID = 2, CharTileID = 58, Count = 3 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 59, PouchID = 2, CharTileID = 59, Count = 2 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 60, PouchID = 2, CharTileID = 60, Count = 8 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 61, PouchID = 2, CharTileID = 61, Count = 2 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 62, PouchID = 2, CharTileID = 62, Count = 2 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 63, PouchID = 2, CharTileID = 63, Count = 8 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 64, PouchID = 2, CharTileID = 64, Count = 1 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 65, PouchID = 2, CharTileID = 65, Count = 3 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 66, PouchID = 2, CharTileID = 66, Count = 3 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 67, PouchID = 2, CharTileID = 67, Count = 4 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 68, PouchID = 2, CharTileID = 68, Count = 4 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 69, PouchID = 2, CharTileID = 69, Count = 9 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 70, PouchID = 2, CharTileID = 70, Count = 4 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 71, PouchID = 2, CharTileID = 71, Count = 4 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 72, PouchID = 2, CharTileID = 72, Count = 4 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 73, PouchID = 2, CharTileID = 73, Count = 5 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 74, PouchID = 2, CharTileID = 74, Count = 3 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 75, PouchID = 2, CharTileID = 75, Count = 1 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 76, PouchID = 2, CharTileID = 76, Count = 1 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 77, PouchID = 2, CharTileID = 77, Count = 1 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 78, PouchID = 2, CharTileID = 78, Count = 2 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 79, PouchID = 2, CharTileID = 79, Count = 1 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 80, PouchID = 2, CharTileID = 80, Count = 1 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 81, PouchID = 2, CharTileID = 81, Count = 2 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 82, PouchID = 2, CharTileID = 82, Count = 1 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 83, PouchID = 2, CharTileID = 83, Count = 1 });
            modelBuilder.Entity<Pouch_CharTile>().HasData(new Pouch_CharTile { ID = 84, PouchID = 2, CharTileID = 84, Count = 2 });

            //modelBuilder.Entity<Rack_CharTile>().HasData(new Rack_CharTile { ID = 1, RackID = 1, CharTileID = 3, Count = 1 });
            //modelBuilder.Entity<Rack_CharTile>().HasData(new Rack_CharTile { ID = 2, RackID = 1, CharTileID = 16, Count = 1 });
            //modelBuilder.Entity<Rack_CharTile>().HasData(new Rack_CharTile { ID = 3, RackID = 1, CharTileID = 10, Count = 1 });
            //modelBuilder.Entity<Rack_CharTile>().HasData(new Rack_CharTile { ID = 4, RackID = 1, CharTileID = 2, Count = 2 });
            //modelBuilder.Entity<Rack_CharTile>().HasData(new Rack_CharTile { ID = 5, RackID = 1, CharTileID = 8, Count = 1 });
            //modelBuilder.Entity<Rack_CharTile>().HasData(new Rack_CharTile { ID = 7, RackID = 1, CharTileID = 4, Count = 1 });
            //modelBuilder.Entity<Rack_CharTile>().HasData(new Rack_CharTile { ID = 8, RackID = 2, CharTileID = 7, Count = 1 });
            //modelBuilder.Entity<Rack_CharTile>().HasData(new Rack_CharTile { ID = 9, RackID = 2, CharTileID = 17, Count = 1 });
            //modelBuilder.Entity<Rack_CharTile>().HasData(new Rack_CharTile { ID = 10, RackID = 2, CharTileID = 10, Count = 1 });
            //modelBuilder.Entity<Rack_CharTile>().HasData(new Rack_CharTile { ID = 11, RackID = 2, CharTileID = 14, Count = 1 });
            //modelBuilder.Entity<Rack_CharTile>().HasData(new Rack_CharTile { ID = 12, RackID = 2, CharTileID = 5, Count = 3 });
        }
    }
    
}
