// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scrabble.Models;

namespace Scrabble.Migrations
{
    [DbContext(typeof(ScrabbleContext))]
    partial class ScrabbleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Scrabble.Models.Board", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Columns");

                    b.Property<int>("GameID");

                    b.Property<int>("Rows");

                    b.HasKey("ID");

                    b.HasIndex("GameID");

                    b.ToTable("Board");
                });

            modelBuilder.Entity("Scrabble.Models.BoardTile", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BoardID");

                    b.Property<int>("BoardLocationX");

                    b.Property<int>("BoardLocationY");

                    b.Property<int>("BoardTileType");

                    b.Property<int>("CharTileID");

                    b.HasKey("ID");

                    b.HasIndex("BoardID");

                    b.HasIndex("CharTileID");

                    b.ToTable("BoardTile");
                });

            modelBuilder.Entity("Scrabble.Models.CharTile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<int?>("PouchID");

                    b.Property<int?>("RackID");

                    b.Property<int>("Score");

                    b.Property<int>("WordDictionaryID");

                    b.HasKey("ID");

                    b.HasIndex("PouchID");

                    b.HasIndex("RackID");

                    b.HasIndex("WordDictionaryID");

                    b.ToTable("CharTile");
                });

            modelBuilder.Entity("Scrabble.Models.Game", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoardID");

                    b.Property<int>("GameLanguage");

                    b.Property<int>("PouchID");

                    b.Property<int>("RackSize");

                    b.Property<int>("WordDictionaryID");

                    b.HasKey("ID");

                    b.HasIndex("BoardID");

                    b.HasIndex("PouchID");

                    b.HasIndex("WordDictionaryID");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("Scrabble.Models.Player", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameID");

                    b.Property<bool>("IsHuman");

                    b.Property<string>("Name");

                    b.Property<int>("PouchID");

                    b.Property<int>("RackID");

                    b.Property<int>("Score");

                    b.HasKey("ID");

                    b.HasIndex("GameID");

                    b.HasIndex("PouchID");

                    b.HasIndex("RackID");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("Scrabble.Models.Pouch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameID");

                    b.HasKey("ID");

                    b.HasIndex("GameID");

                    b.ToTable("Pouch");
                });

            modelBuilder.Entity("Scrabble.Models.Rack", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlayerID");

                    b.Property<int>("RackSize");

                    b.HasKey("ID");

                    b.HasIndex("PlayerID");

                    b.ToTable("Rack");
                });

            modelBuilder.Entity("Scrabble.Models.WordDictionary", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ID");

                    b.ToTable("WordDictionary");
                });

            modelBuilder.Entity("Scrabble.Models.Board", b =>
                {
                    b.HasOne("Scrabble.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scrabble.Models.BoardTile", b =>
                {
                    b.HasOne("Scrabble.Models.Board", "Board")
                        .WithMany("BoardTiles")
                        .HasForeignKey("BoardID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Scrabble.Models.CharTile", "CharTile")
                        .WithMany("BoardTiles")
                        .HasForeignKey("CharTileID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scrabble.Models.CharTile", b =>
                {
                    b.HasOne("Scrabble.Models.Pouch")
                        .WithMany("PouchTiles")
                        .HasForeignKey("PouchID");

                    b.HasOne("Scrabble.Models.Rack")
                        .WithMany("RackTiles")
                        .HasForeignKey("RackID");

                    b.HasOne("Scrabble.Models.WordDictionary", "WordDictionary")
                        .WithMany("LetterTiles")
                        .HasForeignKey("WordDictionaryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scrabble.Models.Game", b =>
                {
                    b.HasOne("Scrabble.Models.Board", "Board")
                        .WithMany()
                        .HasForeignKey("BoardID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Scrabble.Models.Pouch", "Pouch")
                        .WithMany()
                        .HasForeignKey("PouchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Scrabble.Models.WordDictionary", "WordDictionary")
                        .WithMany("Games")
                        .HasForeignKey("WordDictionaryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scrabble.Models.Player", b =>
                {
                    b.HasOne("Scrabble.Models.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Scrabble.Models.Pouch", "Pouch")
                        .WithMany()
                        .HasForeignKey("PouchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Scrabble.Models.Rack", "Rack")
                        .WithMany()
                        .HasForeignKey("RackID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scrabble.Models.Pouch", b =>
                {
                    b.HasOne("Scrabble.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scrabble.Models.Rack", b =>
                {
                    b.HasOne("Scrabble.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
